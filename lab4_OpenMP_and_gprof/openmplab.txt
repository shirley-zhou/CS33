Lab 4:

First, I changed the Makefile:
change:
● SRC = filter.c
● SRCS = $(SRC) main.c func.c util.c
– to
● SRC = func.c
● SRCS = $(SRC) main.c filter.c util.c


make seq GPROF=1
//to produce seq executable, of unaltered code, with gprof on

./seq
//to execute, and produce gmon.out
//output:
FUNC TIME : 0.582916
TOTAL TIME : 2.861546

gprof seq | less > gprofoutput.txt
//to view initial time and function call info
According to the output, it looks like the program spends the most time on func1 (0.31 self seconds). However, rand2 gets called a lot (5177344 times), as well as findIndexBin (491520).
The callgraph also shows that func1 is a possible bottleneck in the program.

Next, I changed func1 inside func.c to add parallelization to the first for-loop. I tried to compile again and check the time.
make clean

make omp
./omp
FUNC TIME : 0.373642
TOTAL TIME : 2.294823


This sped up the function.
Next, I tried to apply the same idea to the second for-loop in func1. Then I realized that there was a problem because index_X and index_Y were declared outside the loop, 
so the threads would share them. This was incorrect, because each thread needed to have its own index_X and index_Y set to its own value. 
I tried to fix this by writing #pragma omp parallel for private(index_X,index_Y). This was still incorrect because it produced an error after 'make check'.
Eventually, I realized I had to make the variable j private to each thread, because I was parallelizing the outer for-loop, 
so each thread would still need to enter its own inner loop using a unique iterator j, that should not be used by other threads.

I added more preprocessor directives to all of the other functions in func.c. I had to deal with another special case in func2 due to an accumulator inside the loop. 
The threads would all need to combine their results into the accumualtor at the end.
I used:
#pragma omp parallel for reduction(+:sumWeights)

Similar solutions were applied to the other functions.

In the end, I achieved these times:
./omp
FUNC TIME : 0.037797
TOTAL TIME : 1.961745

To measure the speedup, I reran the two programs one after another (because time could fluctuate from my previous measurements), 
to compared (FUNC TIME of seq)/(FUNC TIME of omp):
[classnou@lnxsrv09 ~/Desktop/lab4/openmplab]$ ./seq
FUNC TIME : 0.468060
TOTAL TIME : 2.585540
[classnou@lnxsrv09 ~/Desktop/lab4/openmplab]$ ./omp
FUNC TIME : 0.040534
TOTAL TIME : 1.986581

This represents a speedup of 0.468060/0.040534 = 11.55x. I tested this multiple times, and the speedup fluctuated around 10x-12x.

I recompiled omp with GPROF=1 to check the results of my optimizations.
make clean
make GPROF=1
gprof omp | less

Gprof output shows that the functions in func.c are now taking amost no time, so there isn't much left to speed up. 
The bottleneck is now in the other functions that I cannot edit or control. I decided my result was sufficiently fast.

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 60.59      0.46     0.46                             frame_dummy
 17.12      0.59     0.13  4218824     0.00     0.00  rand2
  9.22      0.66     0.07    10530     0.01     0.01  findIndexBin
  7.90      0.72     0.06        1    60.06   189.45  addSeed
  2.63      0.74     0.02                             sequence
  1.32      0.75     0.01        1    10.01    10.01  imdilateDisk
  1.32      0.76     0.01                             filter
  0.00      0.76     0.00    52828     0.00     0.00  round
  0.00      0.76     0.00       16     0.00     0.00  dilateMatrix
  0.00      0.76     0.00       15     0.00     0.00  func1
  0.00      0.76     0.00       15     0.00     0.00  func2
  0.00      0.76     0.00       15     0.00     0.00  func3
  0.00      0.76     0.00       15     0.00     0.00  func4
  0.00      0.76     0.00       15     0.00     0.00  func5
  0.00      0.76     0.00       15     0.00     0.00  rand1
  0.00      0.76     0.00        2     0.00     0.00  get_time
  0.00      0.76     0.00        1     0.00     0.00  elapsed_time
  0.00      0.76     0.00        1     0.00     0.00  fillMatrix
  0.00      0.76     0.00        1     0.00     0.00  func0
  0.00      0.76     0.00        1     0.00     0.00  getNeighbors

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.31% of 0.76 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     69.8    0.46    0.07                 frame_dummy [1]
                0.07    0.00   10530/10530       findIndexBin [5]
                0.00    0.00   24520/4218824     rand2 [4]
                0.00    0.00   52826/52828       round [8]
-----------------------------------------------
                                                 <spontaneous>
[2]     28.8    0.02    0.20                 sequence [2]
                0.06    0.13       1/1           addSeed [3]
                0.01    0.00       1/1           imdilateDisk [6]
-----------------------------------------------
                0.06    0.13       1/1           sequence [2]
[3]     24.9    0.06    0.13       1         addSeed [3]
                0.13    0.00 4194304/4218824     rand2 [4]
-----------------------------------------------
                0.00    0.00   24520/4218824     frame_dummy [1]
                0.13    0.00 4194304/4218824     addSeed [3]
[4]     17.1    0.13    0.00 4218824         rand2 [4]
-----------------------------------------------
                0.07    0.00   10530/10530       frame_dummy [1]
[5]      9.2    0.07    0.00   10530         findIndexBin [5]
-----------------------------------------------
                0.01    0.00       1/1           sequence [2]
[6]      1.3    0.01    0.00       1         imdilateDisk [6]
                0.00    0.00      16/16          dilateMatrix [9]
-----------------------------------------------
                                                 <spontaneous>
[7]      1.3    0.01    0.00                 filter [7]
                0.00    0.00      15/15          func1 [10]
                0.00    0.00      15/15          func2 [11]
                0.00    0.00      15/15          func3 [12]
                0.00    0.00      15/15          rand1 [15]
                0.00    0.00      15/15          func4 [13]
                0.00    0.00      15/15          func5 [14]
                0.00    0.00       2/2           get_time [16]
                0.00    0.00       2/52828       round [8]
                0.00    0.00       1/1           fillMatrix [18]
                0.00    0.00       1/1           getNeighbors [20]
                0.00    0.00       1/1           func0 [19]
                0.00    0.00       1/1           elapsed_time [17]
-----------------------------------------------
                0.00    0.00       2/52828       filter [7]
                0.00    0.00   52826/52828       frame_dummy [1]
[8]      0.0    0.00    0.00   52828         round [8]
-----------------------------------------------
                0.00    0.00      16/16          imdilateDisk [6]
[9]      0.0    0.00    0.00      16         dilateMatrix [9]
-----------------------------------------------
                0.00    0.00      15/15          filter [7]
[10]     0.0    0.00    0.00      15         func1 [10]
-----------------------------------------------
                0.00    0.00      15/15          filter [7]
[11]     0.0    0.00    0.00      15         func2 [11]
-----------------------------------------------
                0.00    0.00      15/15          filter [7]
[12]     0.0    0.00    0.00      15         func3 [12]
-----------------------------------------------
                0.00    0.00      15/15          filter [7]
[13]     0.0    0.00    0.00      15         func4 [13]
-----------------------------------------------
                0.00    0.00      15/15          filter [7]
[14]     0.0    0.00    0.00      15         func5 [14]
-----------------------------------------------
                0.00    0.00      15/15          filter [7]
[15]     0.0    0.00    0.00      15         rand1 [15]
-----------------------------------------------
                0.00    0.00       2/2           filter [7]
[16]     0.0    0.00    0.00       2         get_time [16]
-----------------------------------------------
                0.00    0.00       1/1           filter [7]
[17]     0.0    0.00    0.00       1         elapsed_time [17]
-----------------------------------------------
                0.00    0.00       1/1           filter [7]
[18]     0.0    0.00    0.00       1         fillMatrix [18]
-----------------------------------------------
                0.00    0.00       1/1           filter [7]
[19]     0.0    0.00    0.00       1         func0 [19]
-----------------------------------------------
                0.00    0.00       1/1           filter [7]
[20]     0.0    0.00    0.00       1         getNeighbors [20]
-----------------------------------------------

I also verified my results with 'make check', which outputted no errors.
Then I recompiled with memory tracing to check for leaks:
[classnou@lnxsrv09 ~/Desktop/lab4/openmplab]$ make checkmem
mtrace filter mtrace.out || true

Memory not freed:
-----------------
           Address     Size     Caller
0x0000000001267cb0     0xc0  at 0x7f2073bab7b9
0x0000000001267d80    0x108  at 0x7f2073bab809
0x0000000001267e90    0x240  at 0x7f20740cfde5
0x00000000012680e0    0x240  at 0x7f20740cfde5
0x0000000001268330    0x240  at 0x7f20740cfde5
0x0000000001268580    0x240  at 0x7f20740cfde5
0x00000000012687d0    0x240  at 0x7f20740cfde5
0x0000000001268a20    0x240  at 0x7f20740cfde5
0x0000000001268c70    0x240  at 0x7f20740cfde5
0x0000000001268ec0    0x240  at 0x7f20740cfde5
0x0000000001269110    0x240  at 0x7f20740cfde5
0x0000000001269360    0x240  at 0x7f20740cfde5
0x00000000012695b0    0x240  at 0x7f20740cfde5
0x0000000001269800    0x240  at 0x7f20740cfde5
0x0000000001269a50    0x240  at 0x7f20740cfde5
0x0000000001269ca0    0x240  at 0x7f20740cfde5
0x0000000001269ef0    0x240  at 0x7f20740cfde5
0x000000000126a140    0x240  at 0x7f20740cfde5
0x000000000126a390    0x240  at 0x7f20740cfde5
0x000000000126a5e0    0x240  at 0x7f20740cfde5
0x000000000126a830    0x240  at 0x7f20740cfde5
0x000000000126aa80    0x240  at 0x7f20740cfde5
0x000000000126acd0    0x240  at 0x7f20740cfde5
0x000000000126af20    0x240  at 0x7f20740cfde5
0x000000000126b170    0x240  at 0x7f20740cfde5
0x000000000126b3c0    0x240  at 0x7f20740cfde5
0x000000000126b610    0x240  at 0x7f20740cfde5
0x000000000126b860    0x240  at 0x7f20740cfde5
0x000000000126bab0    0x240  at 0x7f20740cfde5
0x000000000126bd00    0x240  at 0x7f20740cfde5
0x000000000126bf50    0x240  at 0x7f20740cfde5
0x000000000126c1a0    0x240  at 0x7f20740cfde5
0x000000000126c3f0    0x240  at 0x7f20740cfde5
0x0000000001c4c6a0   0x1c40  at 0x7f2073bab7b9

This showed some memory leaks due to using OpenMP, but I have no control over fixing these, since I did not personally use malloc to allocate memory.

Summary and Conclusion:
I achieved a speedup of 11.55x using OpenMP, mostly by adding preprocessor directives like '#pragma omp parallel for' 
(with reductions and private variables specified sometimes, for dealing with accumulators and nested loops) to parallelize the for-loops within func.c.
