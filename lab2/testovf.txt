DESCRIPTION:
Using just the -O2 flag, the compiler seems to completely optimize away the function. Instead of actually doing the comparison, the compiler just returns 0, indicating that LONG_MAX + LONG_MAX is not < LONG_MAX. This is actually the mathematically correct answer, avoiding any overflow problems.

The -fsanitized=undefined flag detects undefined behavior at runtime. Using this flag, the assembly code includes some extra checks for for overflow, calling the function __ubsan_handle_add_overflow to deal with the situation where the addition overflows. The assembly code ends up being a lot longer with the extra checks.

Using the -fwrapv flag, the assembly that is produced is closest to the actual C-code. This version doesn't attempt to check for overflow, but just does the computation. This makes sense because wrapv means that with signed overflow, the extra bits should just be discarded and execution will continue. Overflow doesn't trap but results in an incorrect answer due to addition overflow.


OUTPUT:

gcc -S -fno-asynchronous-unwind-tables -O2 testovf.c

    .file   "testovf.c"
    .section    .text.unlikely,"ax",@progbits
.LCOLDB0:
    .text
.LHOTB0:
    .p2align 4,,15
    .globl  testovf
    .type   testovf, @function
testovf:
    xorl    %eax, %eax
    ret
    .size   testovf, .-testovf
    .section    .text.unlikely
.LCOLDE0:
    .text
.LHOTE0:
    .globl  big
    .data
    .align 8
    .type   big, @object
    .size   big, 8
big:
    .quad   9223372036854775807
    .ident  "GCC: (GNU) 5.2.0"
    .section    .note.GNU-stack,"",@progbits


gcc -S -fno-asynchronous-unwind-tables -O2 -fsanitize=undefined testovf.c

    .file   "testovf.c"
    .section    .text.unlikely,"ax",@progbits
.LCOLDB0:
    .text
.LHOTB0:
    .p2align 4,,15
    .globl  testovf
    .type   testovf, @function
testovf:
    pushq   %rbp
    pushq   %rbx
    movabsq $9223372036854775807, %rdx
    subq    $8, %rsp
    movq    big(%rip), %rbx
    movq    %rbx, %rbp
    addq    %rdx, %rbp
    jo  .L6
.L2:
    cmpq    %rbp, %rbx
    setg    %al
    addq    $8, %rsp
    popq    %rbx
    popq    %rbp
    ret
.L6:
    movq    %rbx, %rsi
    movl    $.Lubsan_data0, %edi
    call    __ubsan_handle_add_overflow
    jmp .L2
    .size   testovf, .-testovf
    .section    .text.unlikely
.LCOLDE0:
    .text
.LHOTE0:
    .section    .rodata.str1.1,"aMS",@progbits,1
.LC1:
    .string "testovf.c"
    .data
    .align 16
    .type   .Lubsan_data0, @object
    .size   .Lubsan_data0, 24
.Lubsan_data0:
    .quad   .LC1
    .long   7
    .long   14
    .quad   .Lubsan_type0
    .align 2
    .type   .Lubsan_type0, @object
    .size   .Lubsan_type0, 15
.Lubsan_type0:
    .value  0
    .value  13
    .string "'long int'"
    .globl  big
    .align 8
    .type   big, @object
    .size   big, 8
big:
    .quad   9223372036854775807
    .ident  "GCC: (GNU) 5.2.0"
    .section    .note.GNU-stack,"",@progbits


gcc -S -fno-asynchronous-unwind-tables -O2 -fwrapv testovf.c

    .file   "testovf.c"
    .section    .text.unlikely,"ax",@progbits
.LCOLDB0:
    .text
.LHOTB0:
    .p2align 4,,15
    .globl  testovf
    .type   testovf, @function
testovf:
    movq    big(%rip), %rdx
    movabsq $9223372036854775807, %rax
    addq    %rdx, %rax
    cmpq    %rax, %rdx
    setg    %al
    ret
    .size   testovf, .-testovf
    .section    .text.unlikely
.LCOLDE0:
    .text
.LHOTE0:
    .globl  big
    .data
    .align 8
    .type   big, @object
    .size   big, 8
big:
    .quad   9223372036854775807
    .ident  "GCC: (GNU) 5.2.0"
    .section    .note.GNU-stack,"",@progbits