First, I tried running the program to see what would happen.
gdb --args ~eggert/bin64/bin/emacs-24.5 -batch -eval '(print(* 6997 - 4398042316799 179))'
(gdb) run

Then I set a breakpoint at Ftimes and ran it again.
(gdb) break Ftimes
Breakpoint 1 at 0x5438c0: file ../../emacs-24.5/src/data.c, line 2767.

According to the breakpoint, Ftimes is located at data.c, line 2767. Next, I looked at the data.c file
emacs ~eggert/src/emacs-24.5/src/data.c
M-g g 2767

This showed that Ftimes called another function called arith_driver, so when arith_driver returns, then Ftimes should also be done.
I went back to gdb to step through the code.
gdb --args ~eggert/bin64/bin/emacs-24.5 -batch -eval '(print (* 6997 -4398042316799 179))'
(gdb) run

When it hit the breakpoint at Ftimes, I stepped through the machine code of the function a few times with stepi. This didn't really give enough information, so I tried again with set disassemble-next-line on to print instructions at each step.
(gdb) set disassemble-next-line on

Then I ran the program again and stepped through Ftimes. At each step, I also asked for information on the registers
(gdb) info registers

After repeating this process until arith_driver returned, I copied the output into another doc and formed the trace.tr file by looking at everything gdb printed.

For the second part of the lab, I ran into trouble with the -fsanitize=undefined flag being undefined. After realizing that I was on the wrong version of gcc, I changed the path using export PATH=/usr/local/cs/bin:$PATH. Then, I compiled the C program using the three different flags -O2, -O2 -fsanitize=undefined, and -O2 -fwrapv.
See the testovf.txt file for the assembly code output.